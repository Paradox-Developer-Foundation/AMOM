
### Checks if state is one island
## scope = state
alias[trigger:is_one_state_island] = bool

### Checks if the Military Industrial Organisation in scope matches the input token
## scope = military_industrial_organization
alias[trigger:is_military_industrial_organization] = <military_industrial_organization>

### Make comparaison on the size of the military industrial organization in the scope. Can use < or > to compare the value with either a fixed value or with a variable
## scope = military_industrial_organization
alias[trigger:has_mio_size] = variable_field

### Checks if the Military Industrial Organisation in scope has the input equipment type (possible values can be found in script_enum_equipment_bonus_type and in Common/equipment_groups)
## scope = military_industrial_organization
alias[trigger:has_mio_equipment_type] = enum[equipment_bonus_type]

### Checks if the Military Industrial Organisation in scope has the input equipment type (possible values can be found in script_enum_equipment_bonus_type and in Common/equipment_groups)
## scope = military_industrial_organization
alias[trigger:has_mio_equipment_type] = <equipment>

### Checks if the Military Industrial Organisation in scope has the input equipment type (possible values can be found in script_enum_equipment_bonus_type and in Common/equipment_groups)
## scope = military_industrial_organization
alias[trigger:has_mio_equipment_type] = <equipment_group>

### Checks if the Country in scope has a  Military Industrial Organisation matching the input token. Can use variable as input
## scope = country
alias[trigger:has_military_industrial_organization] = <military_industrial_organization>

### Checks if the Country in scope has a  Military Industrial Organisation matching the input token. Can use variable as input
## scope = country
alias[trigger:has_military_industrial_organization] = value[variable]

### Checks if MIO is available AND visible
## scope = military_industrial_organization
alias[trigger:is_mio_available] = bool

### Checks if the visible trigger in the Military Industrial Organisation in scope returns true
## scope = military_industrial_organization
alias[trigger:is_mio_visible] = bool

### Checks if the available AND visible triggers in the Military Industrial Organisation in scope return true
## scope = military_industrial_organization
alias[trigger:is_mio_available] = bool

### Checks if the Military Industrial Organisation in scope is assigned to at least 1 task
## scope = military_industrial_organization
alias[trigger:is_mio_assigned_to_task] = bool

### Checks if the Military Industrial Organisation in scope has a trait matching the input token
## scope = military_industrial_organization
alias[trigger:has_mio_trait] = value[mio_trait_token]

### Checks if the Military Industrial Organisation in scope has a trait matching the input token
## scope = military_industrial_organization
alias[trigger:has_mio_trait] = {
	trait = value[mio_trait_token]
}

### Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also completed
## scope = military_industrial_organization
alias[trigger:is_mio_trait_completed] = value[mio_trait_token]

### Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also completed
## scope = military_industrial_organization
alias[trigger:is_mio_trait_completed] = {
	trait = value[mio_trait_token]
}

### Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also available
## scope = military_industrial_organization
alias[trigger:is_mio_trait_available] = value[mio_trait_token]

### Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also available
## scope = military_industrial_organization
alias[trigger:is_mio_trait_available] = {
	trait = value[mio_trait_token]
}

### Make comparaison on the number of unlocked traits of the military industrial organization in the scope. Can use < or > to compare the value with either a fixed value or from a variable
## scope = military_industrial_organization
alias[trigger:has_mio_number_of_completed_traits] = variable_field

### Checks num of planes stationed in a region
## scope = country
alias[trigger:num_planes_stationed_in_regions]  = {
    value = int
    regions = { 
        ## cardinality = 1..inf
	    <strategic_region>
    }
}

### Check if flag has been set within the military industrial organization in scope. May checks on the value or date/days since last modified date
## scope = military_industrial_organization
alias[trigger:has_mio_flag] = value[mio_flag]

### Check if flag has been set within the military industrial organization in scope. May checks on the value or date/days since last modified date
## scope = military_industrial_organization
alias[trigger:has_mio_flag] = {
	flag = value[mio_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### Checks if the Military Industrial Organisation in scope has an allowed policy matching the input token
## scope = military_industrial_organization
alias[trigger:has_mio_policy] = <mio_policy>

### Checks if the Military Industrial Organisation in scope has the input research category
## scope = military_industrial_organization
alias[trigger:has_mio_research_category] = enum[tech_category]

### Checks if the Military Industrial Organisation in scope has the input research category
## scope = military_industrial_organization
alias[trigger:has_mio_research_category] = <equipment_group>

### Checks if the Military Industrial Organisation in scope has the input research category
## scope = military_industrial_organization
alias[trigger:has_mio_research_category] = <equipment.archetype_equip>

### Checks if the Military Industrial Organisation in scope has an allowed matching the input token, which is currently attached to the MIO
## scope = military_industrial_organization
alias[trigger:has_mio_policy_active] = <mio_policy>

### Checks if all Military Industrial Organisations of the Country in scope match the triggers. tooltip=key can be defined to override title
## scope = country
## push_scope = military_industrial_organization
alias[trigger:all_military_industrial_organization] = {
    ## cardinality = 0..1
    tooltip = localisation
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    include_invisible = no
	## cardinality = 0..1
    include_invisible = yes
    alias_name[trigger] = alias_match_left[trigger]
}

### Checks if at least one Military Industrial Organisation of the Country in scope matches the triggers. tooltip=key can be defined to override title
## scope = country
## push_scope = military_industrial_organization
alias[trigger:any_military_industrial_organization] = {
    ## cardinality = 0..1
    tooltip = localisation
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    include_invisible = no
	## cardinality = 0..1
    include_invisible = yes
    alias_name[trigger] = alias_match_left[trigger]
}

### Checks if at least one Purchase contract of the Country in scope matches the triggers. tooltip=key can be defined to override title
## scope = country
## push_scope = purchase_contract
alias[trigger:any_purchase_contract] = {
    ## cardinality = 0..1
    tooltip = localisation
    alias_name[trigger] = alias_match_left[trigger]
}

### Checks if all purchase contracts of the Country in scope matches the triggers.\ntooltip=key can be defined to override title
## scope = country
## push_scope = purchase_contract
alias[trigger:all_purchase_contracts] = {
    ## cardinality = 0..1
    tooltip = localisation
    alias_name[trigger] = alias_match_left[trigger]
}

### Check if contract contains equipment category, equipment archetype or equipment
## scope = purchase_contract
alias[trigger:contract_contains_equipment] = enum[equipment_bonus_type]

### Check value of purchase contract completion. Example: deal_completition < 0.6"
## scope = purchase_contract
alias[trigger:deal_completion] = float[0..1]

### Check the buyer country. Example: buyer = GER
## scope = purchase_contract
alias[trigger:buyer] = scope[country]

### Check the seller country. Example: seller = GER
## scope = purchase_contract
alias[trigger:seller] = scope[country]
