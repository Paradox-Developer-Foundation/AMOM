###Executes children effects on MIOs that fulfils the "limit" trigger. tooltip=key can be added to override tooltip title
## scope = country
## push_scope = military_industrial_organization
alias[effect:every_military_industrial_organization] = {
	### Apply the effect to this number of randomly selected entities
	## cardinality = 0..1
	random_select_amount = int[1..inf]
	## cardinality = 0..1
	display_individual_scopes = bool
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
    ## cardinality = 0..1
    tooltip = localisation
    ## cardinality = 1..inf
    alias_name[effect] = alias_match_left[effect]
}

### Display a tooltip saying the trait is made available (aka unlocked)
## scope = military_industrial_organization
alias[effect:unlock_mio_trait_tooltip] = value[mio_trait_token]

### Display a tooltip saying the trait is made available (aka unlocked)
## scope = military_industrial_organization
alias[effect:unlock_mio_trait_tooltip] = {
    trait = value[mio_trait_token]
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    show_modifiers = yes
	## cardinality = 0..1
    show_modifiers = no
}

### Add to the factor applied when gaining funds in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)
## scope = military_industrial_organization
alias[effect:add_mio_funds_gain_factor] = variable_field

### Add size levels to the military industrial organization in scope. Input value cannot be negative. The MIO will keep the same amount of funds it had before the effect
## scope = military_industrial_organization
alias[effect:add_mio_size] = int_variable_field[1..inf]

### Add to the research bonus in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce research bonus but final research bonus cannot be negative (capped at 0, no error raised)
## scope = military_industrial_organization
alias[effect:add_mio_research_bonus] = variable_field

### Complete a trait in the military industrial organization in scope. This effect will not take into account the current state of the trait tree and will allow you to unlock a trait even if the one before is not unlocked. Will also add 1 size to the MIO so that size and numbers of unlocked traits are always aligned
## scope = military_industrial_organization
alias[effect:complete_mio_trait] = value[mio_trait_token]

### Complete a trait in the military industrial organization in scope. This effect will not take into account the current state of the trait tree and will allow you to unlock a trait even if the one before is not unlocked. Will also add 1 size to the MIO so that size and numbers of unlocked traits are always aligned
## scope = military_industrial_organization
alias[effect:complete_mio_trait] = {
    trait = value[mio_trait_token]
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    show_modifiers = yes
	## cardinality = 0..1
    show_modifiers = no
}

### Add percentage to the daily PP cost to assign to research in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised). 0.1 - 10% increase
## scope = military_industrial_organization
alias[effect:add_mio_design_team_assign_cost] = variable_field

### Set the daily PP cost to assign to research in the military industrial organization in scope.This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = military_industrial_organization
alias[effect:set_mio_design_team_assign_cost] = variable_field[0..inf]

### Add percentage to the daily PP cost to assign to production line in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised). 0.1 - 10% increase
## scope = military_industrial_organization
alias[effect:add_mio_industrial_manufacturer_assign_cost] = variable_field

### Set the daily PP cost to assign to production line in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = military_industrial_organization
alias[effect:set_mio_industrial_manufacturer_assign_cost] = variable_field[0..inf]

### Add percentage to the XP cost to change MIO in equipment designer for the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised). !!! NOTE that the result is rounded down so that i.e. 5 + 10% is still 5 = 5.5 rounded down !!!
## scope = military_industrial_organization
alias[effect:add_mio_design_team_change_cost] = variable_field

### Set the XP cost to change MIO in equipment designer for the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = military_industrial_organization
alias[effect:set_mio_design_team_change_cost] = variable_field[0..inf]

### Add funds to the military industrial organization in scope. Value can be negative to substract funds.If the new total funds go over the Size Up limit, the MIO will gain size(s). If the new total funds is negative, it will be capped at 0 without retracting size. Default Level 1 -> Level 2 to costs 1k, costs increase per each level
## scope = military_industrial_organization
alias[effect:add_mio_funds] = variable_field

### Set the amount of funds for the military industrial organization in scope. Input value cannot be negative. If the new total funds go over the Size Up limit, the MIO will gain size(s)
## scope = military_industrial_organization
alias[effect:set_mio_funds] = variable_field

### Set the factor applied when gaining funds in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Input value cannot be negative. Base - 1?
## scope = military_industrial_organization
alias[effect:set_mio_funds_gain_factor] = variable_field[0..inf]

### Add to the factor applied to funds required to size up in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)
## scope = military_industrial_organization
alias[effect:add_mio_size_up_requirement_factor] = variable_field

### Set to the factor applied to funds required to size up in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = military_industrial_organization
alias[effect:set_mio_size_up_requirement_factor] = variable_field[0..inf]

### Display a tooltip saying the MIO is made available (aka unlocked). Accepts MIO token, variables or keywords
## scope = country
alias[effect:unlock_military_industrial_organization_tooltip] = mio:<military_industrial_organization>

### Display a tooltip saying the MIO is made available (aka unlocked). Accepts MIO token, variables or keywords
## scope = country
alias[effect:unlock_military_industrial_organization_tooltip] = value[variable]

### Show the name of the input MIO with the name of the initial trait (if any)
## scope = country
alias[effect:show_mio_tooltip] = <military_industrial_organization>

### Show the name of the input MIO with the name of the initial trait (if any)
## scope = country
alias[effect:show_mio_tooltip] = value[variable]

### Display a tooltip saying the MIO policy is made available (aka unlocked)
## scope = country
alias[effect:unlock_mio_policy_tooltip] = <mio_policy>

### Display a tooltip saying the MIO policy is made available (aka unlocked)
## scope = country
alias[effect:unlock_mio_policy_tooltip] = {
    policy = <mio_policy>
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    show_modifiers = yes
	## cardinality = 0..1
    show_modifiers = no
}

### Add to the base cost (in PP) for attaching a policy in the MIO policy, found in country in scope with input policy token. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce cost, but final cost cannot be negative (capped at 0, no error raised)
## scope = country
alias[effect:add_mio_policy_cost] = {
    policy = <mio_policy>
    value = int_variable_field
}

### Set the base cost (in PP) for attaching a policy in the MIO policy, found in country in scope with input policy token. This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = country
alias[effect:set_mio_policy_cost] = {
    policy = <mio_policy>
    value = int_variable_field[0..inf]
}

### Add to the base cooldown (in days) after attaching a policy in the MIO policy, found in country in scope with input policy token. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce cost, but final cooldown cannot be negative (capped at 0, no error raised)
## scope = country
alias[effect:add_mio_policy_cooldown] = {
    policy = <mio_policy>
    value = int_variable_field
}

### Set the base cooldown (in days) after attaching a policy in the MIO policy, found in country in scope with input policy token. This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = country
alias[effect:set_mio_policy_cooldown] = {
    policy = <mio_policy>
    value = int_variable_field[0..inf]
}

### Add CIC funds to the tag
## scope = country
alias[effect:add_cic] = variable_field

### Add equipment subsidy to a tag
## scope = country
alias[effect:add_equipment_subsidy] = {
    cic = variable_field
    equipment_type = enum[equipment_bonus_type]
    ## cardinality = 0..1
    seller_trigger = {
        ## cardinality = ~1..inf
        alias_name[trigger] = alias_match_left[trigger]
    }
    ## cardinality = 0..1
    seller_trigger = <scripted_trigger>
    ## cardinality = 0..1
    seller_tags = {
        ## cardinality = 0..inf
        enum[country_tags]
        ## cardinality = 0..inf
        scope[country]
    }
}

### Set the localisation key used to generate the name of the military industrial organization in scope. The localisation key may be a scripted localisation (triggers evaluated in MIO scope)
## scope = military_industrial_organization
alias[effect:set_mio_name_key] = localisation

### Set the localisation key used to generate the name of the military industrial organization in scope. The localisation key may be a scripted localisation (triggers evaluated in MIO scope)
## scope = military_industrial_organization
alias[effect:set_mio_name_key] = <scripted_loc>

### Set the icon GFX for the military industrial organization in scope
## scope = military_industrial_organization
alias[effect:set_mio_icon] = <spriteType>

### Set flag in the military industrial organization in scope
## scope = military_industrial_organization
alias[effect:set_mio_flag] = value_set[mio_flag]

### Set flag in the military industrial organization in scope
## scope = military_industrial_organization
alias[effect:set_mio_flag] = {
	flag = value_set[mio_flag]
    ### Default - 1
	## cardinality = 0..1
	value = int
    ### Default = 0. if > 0, the flag will be deleted after this number of days
	## cardinality = 0..1
	days = int
}

### Modify the matching flag in the military industrial organization in scope. Happens only if the flag already exists
## scope = military_industrial_organization
alias[effect:modify_mio_flag] = {
	flag = value[mio_flag]
    ### Default = 0. Will be added to the current value
	## cardinality = 0..1
	value = int
    ### Default = 0. if > 0, the flag will be deleted after this number of days
	## cardinality = 0..1
	days = int
}

### Clear the matching flag in the military industrial organization in scope
## scope = military_industrial_organization
alias[effect:clr_mio_flag] = value[mio_flag]

### Set the research bonus in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Input value cannot be negative
## scope = military_industrial_organization
alias[effect:set_mio_research_bonus] = variable_field[0..inf]

### Set the maximum task capacity in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Input value cannot be negative. If the capacity is reduced and the MIO becomes over-assigned, the current tasks will be allowed. It's only later that the player will feel the new restrictions
## scope = military_industrial_organization
alias[effect:set_mio_task_capacity] = int_variable_field[0..inf]

### Add to the maximum task capacity in the military industrial organization in scope. This changes the base value. Modifiers will still apply over it. Value can be negative to reduce capacity, but final capacity cannot be negative (capped at 0, no error raised). If the capacity is reduced and the MIO becomes over-assigned, the current tasks will be allowed. It's only later that the player will feel the new restrictions
## scope = military_industrial_organization
alias[effect:add_mio_task_capacity] = int_variable_field

### Executes children effects on a random Military Industrial Organisation of the country in scope, that fulfills the "limit" trigger. tooltip=key can be added to override tooltip title
## scope = country
## push_scope = military_industrial_organization
alias[effect:random_military_industrial_organization] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
    ## cardinality = 0..1
    tooltip = localisation
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    include_invisible = no
	## cardinality = 0..1
    include_invisible = yes
    alias_name[effect] = alias_match_left[effect]
}

### Executes children effects on every Military Industrial Organisation (or "random_select_amount" of random MIOs if specified) of the country in scope, that fulfills the "limit" trigger. tooltip=key can be added to override tooltip title. By default the effects are only displayed once, you may display them for each matching MIO with display_individual_scopes.
## scope = country
## push_scope = military_industrial_organization
alias[effect:every_military_industrial_organization] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
    ## cardinality = 0..1
    tooltip = localisation
    ## cardinality = 0..1
    random_select_amount = int
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    include_invisible = no
	## cardinality = 0..1
    include_invisible = yes
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    display_individual_scopes = no
	## cardinality = 0..1
    display_individual_scopes = yes
    alias_name[effect] = alias_match_left[effect]
}

### Give market access to x
## scope = country
alias[effect:give_market_access] = enum[country_tags]

### Give market access to x
## scope = country
alias[effect:give_market_access] = scope[country]

### Creates a purchase contract between the countries
## scope = any
alias[effect:create_purchase_contract] = {
    seller = scope[country]
    buyer = scope[country]
    civilian_factories = int
    ## cardinality = 1..inf
    equipment = {
        type = enum[equipment_bonus_type]
        amount = int
    }
}

### Cancels the scoped purchase contract
## scope = purchase_contract
alias[effect:cancel_purchase_contract] = yes

### Executes children effects on a random purchase contract of the country in scope, that fulfills the "limit" trigger. tooltip = key need to be added to override the tooltip title
## scope = country
## push_scope = purchase_contract
alias[effect:random_purchase_contract] = {
    ### Override the tooltip title
    ## cardinality = 0..1
    tooltip = localisation
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

### Executes children effects on every purchase contract (or "random_select_amount" of random purchase contracts if specified) of the country in scope, that fulfills the "limit" trigger. tooltip = key need to be added to override the tooltip title
## scope = country
## push_scope = purchase_contract
alias[effect:every_purchase_contract] = {
    ### Override the tooltip title
    ## cardinality = 0..1
    tooltip = localisation
	### Apply the effect to this number of randomly selected entities
	## cardinality = 0..1
	random_select_amount = int[1..inf]
	## cardinality = 0..1
	display_individual_scopes = bool
    ## cardinality = 0..1
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}