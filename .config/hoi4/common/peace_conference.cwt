types = {
    type[peace_action_categories] = {
		path = "game/common/peace_conference/categories"
		skip_root_key = peace_action_categories
        subtype[default] = {
            default = yes
        }
    }
    type[peace_ai_desires] = {
		path = "game/common/peace_conference/ai_peace"
		skip_root_key = peace_ai_desires
    }
    type[peace_action_modifiers] = {
		path = "game/common/peace_conference/cost_modifiers"
		skip_root_key = peace_action_modifiers
    }
}

peace_action_categories = {
    subtype[default] = {
		default = yes
	}
    name = localisation
}

peace_ai_desires = {
    peace_action_type = enum[peace_action]
    # Cardinality magically stops working here, had to improvise. cardinality 1..4
    peace_action_type = { enum[peace_action] }
    peace_action_type = { take_states puppet }
    peace_action_type = { take_states force_government }
    peace_action_type = { take_states liberate }
    peace_action_type = { puppet force_government }
    peace_action_type = { puppet liberate }
    peace_action_type = { force_government liberate }
    peace_action_type = { take_states puppet force_government }
    peace_action_type = { take_states puppet liberate }
    peace_action_type = { take_states force_government liberate }
    peace_action_type = { puppet force_government liberate }
    peace_action_type = { take_states puppet force_government liberate }
    ### ROOT - Negotiator country (who is doing the negotiation)
    ### FROM - Taker country (who will be the owner after the conference)
    ### FROM.FROM - Giver country (who was the owner before the conference)
    ### FROM.FROM.FROM - State (iff peace action refers to a state)
    ### You might have to use e.g. ROOT.FROM to access the variable from inside another scope
    # ROOT.FROM.FROM.FROM = state 
    # ROOT.FROM = country
    # ROOT.FROM.FROM = country
    # FROM = country FROMFROM = country FROMFROMFROM = country
    ## replace_scope = { ROOT = country THIS = country FROM = any }
    enable = {
        ## cardinality 0..inf
        alias_name[trigger] = alias_match_left[trigger]
    }
    ai_desire = int
}

peace_action_modifiers = {
    ## cardinality 0..1
    category = <peace_action_categories>
    peace_action_type = enum[peace_action]
    # Cardinality magically stops working here, had to improvise. cardinality 1..4
    peace_action_type = { enum[peace_action] }
    peace_action_type = { take_states puppet }
    peace_action_type = { take_states force_government }
    peace_action_type = { take_states liberate }
    peace_action_type = { puppet force_government }
    peace_action_type = { puppet liberate }
    peace_action_type = { force_government liberate }
    peace_action_type = { take_states puppet force_government }
    peace_action_type = { take_states puppet liberate }
    peace_action_type = { take_states force_government liberate }
    peace_action_type = { puppet force_government liberate }
    peace_action_type = { take_states puppet force_government liberate }
    ### ROOT - Negotiator country (who is doing the negotiation)
    ### FROM - Taker country (who will be the owner after the conference)
    ### FROM.FROM - Giver country (who was the owner before the conference)
    ### FROM.FROM.FROM - State (iff peace action refers to a state)
    ### You might have to use e.g. ROOT.FROM to access the variable from inside another scope
    # ROOT.FROM.FROM.FROM = state 
    # ROOT.FROM = country
    # ROOT.FROM.FROM = country
    # FROM = country FROMFROM = country FROMFROMFROM = country
    ## replace_scope = { ROOT = country THIS = country FROM = any }
    enable = {
        ## cardinality 0..inf
        alias_name[trigger] = alias_match_left[trigger]
    }
    cost_multiplier = float[0..inf]
}

enums = {
    enum[peace_action] = {
        take_states
        puppet
        force_government
        liberate
    }
}

#during peace conference triggers country

### Checks if country is a winner in peace conference
## scope = country
alias[trigger:pc_is_winner] = bool

### Checks if the current scope is on the winning side within the peace conference. 
## scope = country
alias[trigger:pc_is_on_winning_side] = bool

### Checks if country is a loser in peace conference
## scope = country
alias[trigger:pc_is_loser] = bool

### Checks if the current scope is an untouched loser within the peace conference. 
## scope = country
alias[trigger:c_is_untouched_loser] = bool

### Checks if the current scope is on the same side of the peace conference as the specified country.
## scope = country
alias[trigger:pc_is_on_same_side_as] = enum[country_tags]
### Checks if the current scope is on the same side of the peace conference as the specified country.
## scope = country
alias[trigger:pc_is_on_same_side_as] = scope[country]

### Checks if the current scope has been liberated within the peace conference.
## scope = country
alias[trigger:pc_is_liberated] = bool

### Checks if the current scope has been liberated within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_liberated_by] = enum[country_tags]
### Checks if the current scope has been liberated within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_liberated_by] = scope[country]

### Checks if the current scope has been puppeted within the peace conference.
## scope = country
alias[trigger:pc_is_puppeted] = bool

### Checks if the current scope has been puppeted within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_puppeted_by] = enum[country_tags]
### Checks if the current scope has been puppeted within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_puppeted_by] = scope[country]

### Checks if the current scope has had an enforced government change within the peace conference.
## scope = country
alias[trigger:pc_is_forced_government] = bool

### Checks if the current scope has had an enforced government change within the peace conference demanded by the specified country.
## scope = country
alias[trigger:pc_is_forced_government_by] = enum[country_tags]
### Checks if the current scope has had an enforced government change within the peace conference demanded by the specified country.
## scope = country
alias[trigger:pc_is_forced_government_by] = scope[country]

### Checks if the current scope has had an enforced government change to the specified ideology group.
## scope = country
alias[trigger:pc_is_forced_government_to] = <ideology>

### Checks if the current scope has the specified amount in total score within the peace conference. 	Can only be used for the winning countries. 	1.12
## scope = country
alias[trigger:pc_total_score] = int_variable_field

### Checks if the current scope has the specified amount in current score within the peace conference. 
## scope = country
alias[trigger:pc_current_score] = int_variable_field

### Check if state is claimed with a take_states action in conference for TAG. Example: pc_is_state_claimed_and_taken_by = SOV/ROOT/ROOT.FROM"
## scope = state
alias[trigger:pc_is_state_claimed_and_taken_by] = scope[country]
