types = {
	## unique = yes
	## type_key_filter = style
	type[focus_style] = {
		path = "game/common/national_focus"
		name_field = "name"
	}

	## unique = yes
	## type_key_filter = focus_tree
	type[focus_tree] = {
		path = "game/common/national_focus"
		name_field = "id"
	}

	## unique = yes
	## type_key_filter = continuous_focus_palette
	type[continous_focus_tree] = {
		path = "game/common/continuous_focus"
		name_field = "id"
	}

	## unique = yes
	## type_key_filter = focus
	type[continous_focus] = {
		path = "game/common/continuous_focus"
		skip_root_key = continuous_focus_palette
		name_field = "id"
	}

	## unique = yes
	## type_key_filter = { joint_focus shared_focus }
	type[shared_focus] = {
		path = "game/common/national_focus"
		name_field = "id"

		## only_if_not = { joint_focus }
		## type_key_filter = shared_focus
		subtype[shared] = {
		}

		## only_if_not = { shared_focus }
		## type_key_filter = joint_focus
		subtype[joint_focus] = {
		}

	}

	## type_key_filter = search_filter_prios
	type[search_filter_prios] = {
		path = "game/common/national_focus"
	}
}

focus_tree = {
	id = localisation

	country = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	default = bool

	## cardinality = 0..1
	reset_on_civilwar = bool

	## cardinality = 0..inf
	shared_focus = <shared_focus>

	## cardinality = 0..1
	continuous_focus_position = {
		x = int
		y = int
	}

	## cardinality = 0..inf
	shortcut = {
		name = localisation
		target = <focus>
		scroll_wheel_factor = float
		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	## cardinality = 0..inf
	inlay_window = {
		id = <focus_inlay_window>
		position = {
			x = int
			y = int
		}
	}

	## cardinality = 0..1
	initial_show_position = {
		## cardinality = 0..1
		focus = enum[focus_id]

		## cardinality = 0..1
		focus = <shared_focus>

		## cardinality = 0..1
		x = int

		## cardinality = 0..1
		y = int

		## cardinality = 0..inf
		offset = {
			## cardinality = 0..1
			x = int
			## cardinality = 0..1
			y = int

			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}

	## cardinality = 0..inf
	focus = {
		id = localisation

		## cardinality = 0..1
		text = localisation

		## cardinality = ~1..inf
		icon = <spriteType>

		## cardinality = 0..1
		text_icon = <focus_style>

		## cardinality = ~1..inf
		icon = {
			## cardinality = 0..1
			## replace_scope = { root = country this = country }
			trigger = {
				## cardinality = ~1..inf
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = ~1..1
			value = <spriteType>
		}

		### A cost of 1 represents a week by default. Decimals within cost are supported, and it will get rounded down to a whole day in the game. 
		## severity = warning
		cost = float

		## severity = warning
		x = float

		## severity = warning
		y = float

		## cardinality = 0..inf
		offset = {
			## cardinality = 0..1
			x = int
			## cardinality = 0..1
			y = int
			## cardinality = 0..1
			## replace_scope = { root = country this = country }
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}

		## cardinality = 0..1
		relative_position_id = enum[focus_id]

		## cardinality = 0..1
		relative_position_id = <shared_focus>

		### Used for focuses that can change title/desc.
		## cardinality = 0..1
		dynamic = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		dynamic = no

		## cardinality = 0..1
		available_if_capitulated = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		available_if_capitulated = no

		## cardinality = 0..1
		cancel_if_invalid = no
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		cancel_if_invalid = yes

		## cardinality = 0..1
		continue_if_invalid = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		continue_if_invalid = no

		## cardinality = 0..1
		cancelable = no
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		cancelable = yes

		## cardinality = 0..1
		bypass_if_unavailable = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		bypass_if_unavailable = no

		## cardinality = 0..inf
		will_lead_to_war_with = scope[country]

		## cardinality = 0..inf
		will_lead_to_war_with = enum[explicit_country_tags]

		## cardinality = 0..inf
		prerequisite = {
			## cardinality = 0..inf
			focus = enum[focus_id]

			## cardinality = 0..inf
			focus = <shared_focus>
		}

		## cardinality = 0..inf
		mutually_exclusive = {
			## cardinality = 0..inf
			focus = enum[focus_id]

			## cardinality = 0..inf
			focus = <shared_focus>
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		bypass = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		allow_branch = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		available = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		cancel = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		historical_ai = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		select_effect = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		cancel_effect = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		## push_scope = any
		complete_tooltip = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		on_uncomplete = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = ~1..1
		## replace_scope = { root = country this = country }
		completion_reward = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		ai_will_do = {
			## cardinality = 0..1
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}

		## cardinality = 0..1
		search_filters = {
			## cardinality = ~1..inf
			value_set[focus_filter]
		}
	}
}

## replace_scope = { root = country this = country }
shared_focus = {
	id = localisation

	## cardinality = 0..1
	text = localisation

	## cardinality = 0..inf
	icon = <spriteType>
	## cardinality = 0..inf
	icon = {
		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		trigger = {
			## cardinality = 0..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		value = <spriteType>
	}
	## cardinality = 0..1
	text_icon = <focus_style>

	### A cost of 1 represents a week by default. Decimals within cost are supported, and it will get rounded down to a whole day in the game. 
	cost = float
	x = int
	y = int

	## cardinality = 0..inf
	offset = {
		## cardinality = 0..1
		x = int
		## cardinality = 0..1
		y = int

		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	## cardinality = 0..1
	relative_position_id = <shared_focus>

	## cardinality = 0..1
	relative_position_id = <focus>

	### Used for focuses that can change title/desc.
	## cardinality = 0..1
	dynamic = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	dynamic = no

	## cardinality = 0..1
	available_if_capitulated = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	available_if_capitulated = no

	## cardinality = 0..1
	cancel_if_invalid = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	cancel_if_invalid = no

	## cardinality = 0..1
	continue_if_invalid = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	continue_if_invalid = no

	## cardinality = 0..1
	cancelable = no
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	cancelable = yes

	## cardinality = 0..1
	bypass_if_unavailable = yes
	## error_if_only_match = This is the default value and can be ommitted
	## severity = info
	## cardinality = 0..1
	bypass_if_unavailable = no

	## cardinality = 0..inf
	will_lead_to_war_with = scope[country]

	## cardinality = 0..inf
	will_lead_to_war_with = enum[explicit_country_tags]

	## cardinality = 0..inf
	prerequisite = {
		## cardinality = 0..inf
		focus = <shared_focus>

		## cardinality = 0..inf
		focus = <focus>
	}

	## cardinality = 0..inf
	mutually_exclusive = {
		## cardinality = 0..inf
		focus = <shared_focus>
		## cardinality = 0..inf
		focus = <focus>
	}

	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	bypass = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	allow_branch = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	available = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	cancel = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	subtype[joint_focus] = {
		### Check if country is considered joint for the focus.
		## cardinality = ~1..1
		## replace_scope = { root = country this = country }
		joint_trigger = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		completion_reward_joint_originator = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}
		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		completion_reward_joint_member = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}
		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		completion_reward = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}
	}

	## cardinality = 0..1
	historical_ai = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	select_effect = {
		## cardinality = ~1..inf
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	## push_scope = any
	complete_tooltip = {
		## cardinality = ~1..inf
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	on_uncomplete = {
		## cardinality = ~1..inf
		alias_name[effect] = alias_match_left[effect]
	}

	subtype[shared] = {
		## cardinality = ~1..1
		## replace_scope = { root = country this = country }
		completion_reward = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}
	}

	## cardinality = 0..1
	ai_will_do = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	search_filters = {
		## cardinality = ~1..inf
		value_set[focus_filter]
	}
}

## replace_scope = { root = country this = country }
continous_focus_tree = {
	id = localisation

	country = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	default = bool

	## cardinality = 0..1
	reset_on_civilwar = bool

	## cardinality = 0..1
	position = {
		x = int
		y = int
	}

	## cardinality = 0..inf
	focus = {
		id = localisation

		## cardinality = ~1..inf
		icon = <spriteType>

		## cardinality = ~1..inf
		icon = {
			## cardinality = 0..1
			## replace_scope = { root = country this = country }
			trigger = {
				## cardinality = ~1..inf
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = ~1..1
			value = <spriteType>
		}

		### The cost in daily political power gain to take this focus compared to not having any focus selected
		## severity = warning
		daily_cost = float

		## cardinality = 0..1
		available_if_capitulated = yes
		## error_if_only_match = This is the default value and can be ommitted
		## severity = info
		## cardinality = 0..1
		available_if_capitulated = no

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		available = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { root = country this = country }
		## cardinality = 0..1
		enable = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 0..1
		supports_ai_strategy = <ai_focus>

		## cardinality = 0..1
		modifier = {
			## cardinality = ~1..inf
			alias_name[modifier] = alias_match_left[modifier]
		}

		## cardinality = 0..1
		idea = enum[idea_name]

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		select_effect = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		## replace_scope = { root = country this = country }
		cancel_effect = {
			## cardinality = ~1..inf
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		ai_will_do = {
			## cardinality = 0..1
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
	}
}


style = {
	## cardinality = 1..1
	name = scalar

	## cardinality = 0..1
	default = yes
	## cardinality = 0..1
	## error_if_only_match = This is the default value and can be omitted
	default = no

	## cardinality = 1..1
	unavailable = <spriteType>
	## cardinality = 1..1
	completed = <spriteType>
	## cardinality = 1..1
	available = <spriteType>
	## cardinality = 1..1
	current = <spriteType>
}

search_filter_prios = {
	## cardinality = 0..inf
	value[focus_filter] = int
}


enums = {
	complex_enum[focus_id] = {
		path = "game/common/national_focus"
		start_from_root = yes
		name = {
			focus_tree = {
				focus = {
					id = enum_name
				}
			}
		}
	}
}